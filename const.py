import numpy as np
import pandas as pd
import os, math
import codecs

import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.base import ClassifierMixin
from sklearn.metrics import (
    accuracy_score,
    precision_score,
    f1_score,
    fbeta_score,
    recall_score,
    auc,
)
from sklearn.model_selection import cross_val_predict

RED = "\033[0;31;40m"
YELLOW = "\033[0;33;40m"
CYAN = "\033[0;36;40m"
HIGHLIGHT = "\033[1;4;37;40m"
INFO = "\033[2;3;37;40m"
END = "\033[0m"

label_text = {0: "Alz", 1: "Hea", 2: "Fro"}

delta_sel_feature = [
    "awe_pli_17",
    "awd_10",
    "awe_pli_15",
    "awe_pli_2",
    "awd_0",
    "awe_pli_11",
    "awd_11",
    "awd_3",
    "entropy_0",
    "entropy_10",
    "entropy_3",
    "awd_2",
    "ddi_15",
    "awe_pli_4",
    "awd_16",
    "awd_1",
    "awe_pli_18",
    "awe_pli_3",
    "awe_pli_16",
    "ddi_0",
    "awd_12",
    "entropy_12",
    "entropy_16",
    "ddi_10",
    "entropy_11",
    "entropy_9",
    "entropy_2",
    "awd_8",
    "ddi_9",
    "awd_6",
    "awe_pli_14",
    "ddi_16",
    "awe_pli_13",
    "entropy_4",
    "awe_pli_5",
    "entropy_14",
    "entropy_15",
    "ddi_8",
    "ddi_3",
    "awd_15",
]

theta_sel_feature = [
    "ddi_9",
    "ddi_8",
    "ddi_14",
    "mcc",
    "awd_9",
    "awd_8",
    "awd_14",
    "ddi_15",
    "awd_15",
    "ddi_6",
    "ddi_18",
    "awd_6",
    "awd_18",
    "ddi_3",
    "awd_3",
    "awd_11",
    "ddi_16",
    "awd_2",
    "ddi_2",
    "ddi_1",
    "ddi_11",
    "awd_0",
    "awe_pli_5",
    "awd_10",
    "awd_16",
    "awe_pli_4",
    "ddi_7",
    "awd_1",
    "ddi_0",
    "awd_13",
    "awd_12",
    "awd_7",
]

alpha_sel_feature = [
    "mcc",
    "entropy_14",
    "awe_pli_18",
    "awe_pli_9",
    "entropy_8",
    "awe_pli_8",
    "entropy_9",
    "awe_pli_0",
    "awe_pli_14",
    "awe_pli_13",
    "awe_pli_6",
    "awe_pli_11",
    "awe_pli_1",
    "awe_pli_15",
    "awe_pli_12",
    "awe_pli_3",
    "awe_pli_10",
    "awe_pli_2",
    "entropy_6",
    "awe_pli_7",
    "ddi_0",
    "awe_pli_16",
    "ddi_12",
    "entropy_18",
    "awd_0",
    "entropy_15",
    "entropy_1",
    "entropy_3",
    "entropy_11",
    "ddi_1",
    "entropy_7",
    "ddi_2",
    "ddi_10",
    "awe_pli_17",
    "awd_12",
    "awd_1",
    "ddi_3",
    "ddi_6",
    "awe_pli_4",
    "awd_10",
    "entropy_0",
    "ddi_16",
    "entropy_2",
    "awd_16",
    "awd_2",
    "entropy_13",
    "entropy_16",
    "awd_14",
    "ddi_11",
    "entropy_12",
    "ddi_8",
    "ddi_4",
    "awd_8",
    "ddi_18",
    "awd_3",
    "ddi_7",
    "ddi_14",
    "entropy_10",
    "awe_pli_5",
    "awd_6",
    "entropy_4",
    "awd_15",
    "ddi_13",
]

beta_sel_feature = [
    "ddi_11",
    "ddi_12",
    "ddi_13",
    "ddi_0",
    "mcc",
    "ddi_14",
    "ddi_2",
    "ddi_10",
    "ddi_1",
    "ddi_15",
    "awd_12",
    "awd_14",
    "ddi_3",
    "ddi_18",
    "ddi_6",
    "awd_2",
    "ddi_4",
    "awd_13",
    "awd_6",
    "awd_0",
    "ddi_7",
    "awd_11",
    "ddi_5",
    "ddi_8",
    "awd_15",
    "awd_1",
    "awe_pli_6",
    "entropy_12",
    "awe_pli_8",
    "awd_4",
    "awe_pli_14",
    "awe_pli_11",
    "awe_pli_1",
    "awd_10",
    "awd_8",
    "entropy_7",
    "ddi_9",
    "awe_pli_10",
    "awd_7",
    "awe_pli_5",
    "awe_pli_2",
    "awd_18",
    "awd_3",
    "awe_pli_16",
    "awe_pli_13",
    "awd_9",
    "entropy_16",
    "entropy_18",
    "awe_pli_7",
    "awe_pli_15",
    "awe_pli_18",
    "awd_5",
    "entropy_0",
    "ddi_16",
    "entropy_5",
    "awd_16",
    "awe_pli_3",
]

# [
#     "ddi_11",
#     "ddi_12",
#     "ddi_13",
#     "ddi_0",
#     "mcc",
#     "ddi_14",
#     "ddi_2",
#     "ddi_1",
#     "awd_12",
#     "ddi_3",
#     "ddi_9",
# ]
beta_re_sel_feature_bk = [
    "mcc",
    "ddi_12",
    "ddi_13",
    "ddi_11",
    "ddi_0",
    "ddi_14",
    "ddi_9",
    "awd_12",
    "ddi_2",
    "ddi_10",
    "ddi_1",
    "ddi_16",
    "ddi_3",
    "awd_2",
    "ddi_17",
]

beta_re_sel1_feature = [
    "mcc",
    "ddi_12",
    "ddi_13",
    "ddi_11",
    "ddi_0",
    "ddi_14",
    "ddi_9",
    "awd_12",
    "ddi_2",
    "ddi_10",
    "ddi_1",
    "awd_11",
    "entropy_12",
    "awd_9",
    "ddi_16",
    "ddi_3",
    "awd_2",
    "ddi_17",
    "awd_13",
    "entropy_16",
    "entropy_18",
    "ddi_15",
    "awd_4",
    "entropy_7",
    "awd_0",
]

beta_re_sel2_feature = [  # From ANOVA
    "mcc",
    "ddi_12",
    "ddi_11",
    "ddi_13",
    "ddi_0",
    "awd_12",
    "ddi_14",
    "ddi_1",
    "ddi_9",
    "ddi_2",
    "awd_0",
    "ddi_10",
    "entropy_12",
    "ddi_3",
    "awd_13",
    "awd_11",
    "ddi_16",
    "awd_2",
    "entropy_16",
    "ddi_8",
    "awd_6",
    "awd_9",
    "ddi_15",
    "awd_14",
    "entropy_7",
]

all_sel_feature = [
    "beta_mcc",
    "theta_mcc",
    "alpha_mcc",
    "beta_ddi_12",
    "beta_ddi_13",
    "beta_ddi_11",
    "beta_ddi_2",
    "alpha_entropy_9",
    "alpha_ddi_12",
    "alpha_awe_pli_9",
    "alpha_ddi_0",
    "beta_ddi_0",
    "alpha_entropy_8",
    "beta_awd_12",
    "alpha_entropy_14",
    "beta_ddi_10",
    "beta_awd_11",
    "alpha_awe_pli_18",
    "alpha_awe_pli_6",
    "alpha_awe_pli_8",
    "beta_ddi_1",
    "beta_ddi_14",
    "theta_ddi_8",
    "alpha_ddi_14",
    "theta_ddi_9",
    "alpha_awe_pli_14",
    "alpha_ddi_13",
    "alpha_ddi_6",
    "alpha_entropy_15",
    "beta_ddi_9",
    "alpha_awd_0",
    "beta_awd_2",
    "alpha_ddi_1",
    "beta_ddi_3",
    "alpha_ddi_15",
    "alpha_awe_pli_15",
    "theta_ddi_17",
    "alpha_entropy_7",
    "alpha_ddi_10",
    "alpha_awe_pli_11",
    "alpha_entropy_6",
    "alpha_awe_pli_12",
    "beta_awd_13",
    "alpha_ddi_2",
    "beta_awd_14",
    "alpha_ddi_18",
    "alpha_ddi_9",
    "theta_ddi_14",
    "theta_mpc",
    "theta_awd_11",
    "beta_awd_10",
    "beta_entropy_16",
    "beta_awd_6",
    "beta_entropy_12",
    "alpha_ddi_16",
    "beta_ddi_17",
    "alpha_awd_12",
    "beta_awd_0",
    "beta_ddi_8",
    "alpha_awd_16",
    "theta_awd_14",
    "alpha_ddi_8",
    "beta_awd_9",
    "alpha_ddi_11",
    "alpha_ddi_7",
    "theta_awd_15",
    "alpha_ddi_17",
    "alpha_entropy_1",
    "alpha_awd_15",
    "alpha_entropy_18",
    "alpha_awe_pli_3",
    "beta_awe_pli_11",
    "theta_awe_pli_17",
    "beta_awe_pli_8",
    "alpha_awd_1",
    "alpha_entropy_2",
    "alpha_awe_pli_0",
    "theta_awd_9",
    "alpha_entropy_3",
    "beta_entropy_18",
    "alpha_awe_pli_10",
    "alpha_awd_2",
    "alpha_awe_pli_7",
    "alpha_awe_pli_13",
    "beta_entropy_17",
    "beta_awd_1",
    "theta_awe_pli_14",
    "beta_entropy_15",
    "beta_ddi_16",
    "theta_awd_8",
    "alpha_awd_11",
    "delta_awe_pli_17",
    "delta_awe_pli_18",
    "delta_awe_pli_15",
    "alpha_awd_3",
    "beta_entropy_3",
    "alpha_mpc",
    "beta_ddi_6",
    "alpha_entropy_10",
    "alpha_entropy_11",
    "alpha_ddi_3",
    "alpha_awe_pli_4",
    "beta_entropy_0",
    "beta_awe_pli_6",
    "alpha_awd_9",
    "alpha_entropy_5",
    "beta_awe_pli_5",
    "beta_awd_17",
    "beta_awd_4",
    "theta_awd_4",
    "alpha_ddi_4",
    "theta_entropy_10",
    "alpha_awe_pli_2",
    "theta_ddi_15",
    "beta_ddi_4",
    "beta_awe_pli_3",
    "alpha_awd_8",
    "alpha_awe_pli_16",
    "alpha_ddi_5",
    "delta_awe_pli_11",
    "alpha_awd_14",
    "theta_entropy_4",
    "beta_awe_pli_2",
    "delta_awe_pli_7",
    "beta_awd_5",
    "theta_entropy_0",
    "beta_ddi_15",
    "theta_ddi_12",
    "beta_mpc",
    "beta_awe_pli_17",
    "alpha_entropy_13",
    "delta_awe_pli_13",
    "theta_entropy_11",
    "beta_ddi_18",
    "beta_awe_pli_18",
    "alpha_entropy_0",
    "beta_entropy_9",
    "alpha_awe_pli_5",
    "delta_entropy_16",
    "delta_awe_pli_10",
    "alpha_awd_10",
    "delta_awe_pli_8",
    "beta_awd_8",
    "theta_awe_pli_5",
    "beta_awe_pli_14",
    "theta_ddi_1",
    "theta_entropy_9",
    "theta_awe_pli_13",
    "delta_mcc",
    "theta_entropy_17",
    "delta_awe_pli_2",
    "beta_awd_3",
    "alpha_awd_6",
    "theta_ddi_5",
    "theta_awe_pli_11",
    "alpha_awe_pli_1",
    "beta_ddi_7",
    "alpha_awd_17",
    "alpha_entropy_4",
    "theta_awd_18",
    "theta_entropy_2",
    "beta_awe_pli_7",
    "theta_awd_13",
    "theta_entropy_15",
    "beta_awe_pli_12",
    "theta_awe_pli_18",
    "theta_awd_17",
    "delta_awe_pli_16",
    "beta_awe_pli_1",
    "beta_entropy_1",
    "theta_awe_pli_10",
    "delta_awe_pli_3",
    "theta_entropy_13",
    "delta_awe_pli_5",
    "theta_entropy_6",
    "alpha_awd_4",
    "alpha_entropy_17",
    "beta_ddi_5",
    "delta_awe_pli_0",
    "delta_ddi_15",
    "theta_awe_pli_6",
    "beta_awe_pli_4",
    "theta_entropy_12",
    "beta_awe_pli_16",
    "delta_ddi_17",
    "theta_awe_pli_7",
    "beta_awe_pli_10",
    "delta_awe_pli_4",
    "beta_awe_pli_13",
    "theta_awe_pli_8",
    "delta_mpc",
    "alpha_entropy_16",
    "theta_ddi_10",
    "delta_ddi_12",
    "theta_entropy_16",
    "theta_awe_pli_0",
    "beta_awd_18",
    "theta_ddi_4",
    "beta_awd_15",
    "theta_entropy_7",
    "theta_ddi_3",
    "theta_entropy_3",
    "alpha_awe_pli_17",
    "beta_entropy_7",
    "delta_awe_pli_9",
    "beta_entropy_5",
    "beta_entropy_8",
    "theta_ddi_0",
    "delta_awe_pli_1",
    "theta_awd_12",
    "beta_entropy_14",
    "delta_awe_pli_6",
    "alpha_awd_18",
    "beta_entropy_13",
    "theta_awd_3",
    "theta_ddi_6",
    "theta_entropy_14",
    "delta_ddi_5",
    "theta_awe_pli_2",
    "beta_awe_pli_0",
    "delta_awd_10",
    "theta_entropy_1",
    "alpha_awd_13",
    "theta_ddi_16",
    "beta_awd_7",
    "theta_entropy_5",
    "theta_awd_16",
    "theta_ddi_2",
    "theta_awe_pli_9",
    "theta_ddi_13",
    "delta_awd_0",
    "delta_ddi_1",
    "delta_ddi_2",
    "delta_awd_8",
    "beta_entropy_11",
    "delta_awe_pli_12",
    "beta_awd_16",
    "beta_entropy_4",
    "beta_awe_pli_9",
    "delta_ddi_9",
    "theta_awd_1",
    "delta_entropy_15",
    "theta_awd_0",
    "delta_entropy_11",
    "alpha_awd_5",
    "theta_entropy_8",
    "theta_entropy_18",
    "alpha_entropy_12",
    "beta_entropy_6",
    "theta_awe_pli_4",
    "theta_awd_6",
    "theta_awd_10",
    "delta_entropy_4",
    "delta_ddi_8",
    "delta_entropy_12",
    "theta_awe_pli_15",
    "theta_awe_pli_1",
    "delta_entropy_3",
    "theta_awd_2",
    "theta_awd_5",
    "delta_awe_pli_14",
    "delta_entropy_0",
    "delta_entropy_10",
    "beta_entropy_2",
    "theta_ddi_7",
    "alpha_awd_7",
    "theta_ddi_18",
    "theta_awe_pli_3",
    "theta_awe_pli_16",
    "delta_awd_14",
    "theta_awd_7",
    "delta_entropy_13",
    "delta_ddi_0",
    "delta_ddi_13",
    "beta_entropy_10",
    "delta_ddi_18",
    "delta_awd_11",
    "delta_ddi_14",
    "delta_ddi_4",
    "theta_awe_pli_12",
    "delta_awd_3",
    "delta_awd_5",
    "delta_ddi_6",
    "delta_awd_2",
    "delta_ddi_11",
    "delta_awd_1",
    "delta_entropy_8",
    "delta_ddi_3",
    "delta_entropy_18",
    "delta_entropy_7",
    "delta_awd_15",
    "delta_awd_12",
    "delta_ddi_7",
    "delta_awd_4",
    "delta_awd_18",
    "beta_awe_pli_15",
    "delta_entropy_5",
    "delta_ddi_10",
    "delta_awd_6",
    "delta_awd_9",
    "delta_entropy_14",
    "delta_awd_16",
    "delta_entropy_2",
    "delta_awd_17",
    "delta_ddi_16",
    "delta_entropy_1",
    "theta_ddi_11",
    "delta_entropy_9",
    "delta_entropy_17",
    "delta_entropy_6",
    "delta_awd_7",
    "delta_awd_13",
]


feature_sel_dict = {
    "delta": delta_sel_feature,
    "theta": theta_sel_feature,
    "alpha": alpha_sel_feature,
    "beta": beta_sel_feature,
    "beta_resel1": beta_re_sel1_feature,
    "beta_resel2": beta_re_sel2_feature,  # Not Used
}


class multiclass_test_module:
    def __init__(self, classifier: ClassifierMixin, name: str) -> None:
        self.clf = classifier
        self.name = name

    def cv_test(self, flist: list[str], cv: int, X, y) -> None:
        self.acc = np.zeros(len(flist))
        # self.pre = np.zeros(len(flist))
        # self.rec = np.zeros(len(flist))
        self.f1 = np.zeros(len(flist))
        # self.fb = np.zeros(len(flist))
        for i in range(len(flist)):
            print(INFO + "{}/{}".format(i + 1, len(flist)) + END)
            y_prediction = cross_val_predict(
                self.clf, X[flist[0 : i + 1]], y, cv=cv, n_jobs=None
            )
            self.acc[i] = accuracy_score(y, y_prediction)
            # self.pre[i] = precision_score(y, y_prediction, average="macro")
            # self.rec[i] = recall_score(y, y_prediction, average="macro")
            self.f1[i] = f1_score(y, y_prediction, average="macro")  # None)[1]
            # self.fb[i] = fbeta_score(y, y_prediction, average="macro")


def plot_result(
    fre_name: str, group_name: str, mlist: list[multiclass_test_module]
) -> None:
    plot_length = len(mlist[0].acc)
    x = np.arange(1, plot_length + 1)
    c_list = [
        "k",
        "royalblue",
        "lightcoral",
        "turquoise",
        "olive",
        "sandybrown",
        "palegreen",
        "violet",
        "lightskyblue",
    ]

    plt.figure(figsize=(16, 9), dpi=130)
    for i in range(len(mlist)):
        plt.plot(x, mlist[i].acc, color=c_list[i], linestyle="-", label=mlist[i].name)
        print(CYAN + "The Accuracy result of {} :".format(mlist[i].name) + END)
        print(mlist[i].acc)
        print(np.average(mlist[i].acc))
    # plt.title("Accuracy")
    plt.xlabel(r"$Num\quad of\quad Features$")
    plt.ylabel(r"$Accuracy$")
    plt.legend()
    plt.savefig(
        os.path.join("..", "output", "performance", "")
        + fre_name
        + "_"
        + group_name
        + "_acc.png",
        dpi=660,
    )
    plt.show()

    plt.figure(figsize=(16, 9), dpi=130)
    for i in range(len(mlist)):
        plt.plot(x, mlist[i].f1, color=c_list[i], linestyle="-", label=mlist[i].name)
        print(CYAN + "The F1 Score result of {} :".format(mlist[i].name) + END)
        print(mlist[i].f1)
        print(np.average(mlist[i].f1))
    # plt.title("Accuracy")
    plt.xlabel(r"$Num\quad of\quad Features$")
    plt.ylabel(r"$F_1 Score$")
    plt.legend()
    plt.savefig(
        os.path.join("..", "output", "performance", "")
        + fre_name
        + "_"
        + group_name
        + "_f1.png",
        dpi=660,
    )
    plt.show()
